{"version":3,"file":"Form.stories-831ec9e4.js","sources":["../../../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../../../node_modules/react/jsx-runtime.js","../../../../node_modules/react-hook-form/dist/index.esm.mjs","../../../../packages/form/dist/index.mjs","../../src/mocks/fields.ts"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\r\n    ? isCheckBoxInput(event.target)\r\n        ? event.target.checked\r\n        : event.target.value\r\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    if (!path || !isObject(obj)) {\r\n        return defaultValue;\r\n    }\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    FOCUS_OUT: 'focusout',\r\n    CHANGE: 'change',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nconst HookFormContext = React.createContext(null);\r\n/**\r\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @returns return all useForm methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst useFormContext = () => React.useContext(HookFormContext);\r\n/**\r\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @param props - all useFrom methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst FormProvider = (props) => {\r\n    const { children, ...data } = props;\r\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\r\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\r\n    const result = {\r\n        defaultValues: control._defaultValues,\r\n    };\r\n    for (const key in formState) {\r\n        Object.defineProperty(result, key, {\r\n            get: () => {\r\n                const _key = key;\r\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\r\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\r\n                }\r\n                localProxyFormState && (localProxyFormState[_key] = true);\r\n                return formState[_key];\r\n            },\r\n        });\r\n    }\r\n    return result;\r\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\r\n    updateFormState(formStateData);\r\n    const { name, ...formState } = formStateData;\r\n    return (isEmptyObject(formState) ||\r\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\r\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\r\n            (!isRoot || VALIDATION_MODE.all)));\r\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\r\n    ? name === signalName\r\n    : !name ||\r\n        !signalName ||\r\n        name === signalName ||\r\n        convertToArrayPayload(name).some((currentName) => currentName &&\r\n            (currentName.startsWith(signalName) ||\r\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\r\n    const _props = React.useRef(props);\r\n    _props.current = props;\r\n    React.useEffect(() => {\r\n        const subscription = !props.disabled &&\r\n            _props.current.subject.subscribe({\r\n                next: _props.current.next,\r\n            });\r\n        return () => {\r\n            subscription && subscription.unsubscribe();\r\n        };\r\n    }, [props.disabled]);\r\n}\n\n/**\r\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\r\n *\r\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, control } = useForm({\r\n *     defaultValues: {\r\n *     firstName: \"firstName\"\r\n *   }});\r\n *   const { dirtyFields } = useFormState({\r\n *     control\r\n *   });\r\n *   const onSubmit = (data) => console.log(data);\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\r\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFormState(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, disabled, name, exact } = props || {};\r\n    const [formState, updateFormState] = React.useState(control._formState);\r\n    const _mounted = React.useRef(true);\r\n    const _localProxyFormState = React.useRef({\r\n        isDirty: false,\r\n        isLoading: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    });\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    useSubscribe({\r\n        disabled,\r\n        next: (value) => _mounted.current &&\r\n            shouldSubscribeByName(_name.current, value.name, exact) &&\r\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\r\n            updateFormState({\r\n                ...control._formState,\r\n                ...value,\r\n            }),\r\n        subject: control._subjects.state,\r\n    });\r\n    React.useEffect(() => {\r\n        _mounted.current = true;\r\n        const isDirty = control._proxyFormState.isDirty && control._getDirty();\r\n        if (isDirty !== control._formState.isDirty) {\r\n            control._subjects.state.next({\r\n                isDirty,\r\n            });\r\n        }\r\n        _localProxyFormState.current.isValid && control._updateValid(true);\r\n        return () => {\r\n            _mounted.current = false;\r\n        };\r\n    }, [control]);\r\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\r\n    if (isString(names)) {\r\n        isGlobal && _names.watch.add(names);\r\n        return get(formValues, names, defaultValue);\r\n    }\r\n    if (Array.isArray(names)) {\r\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\r\n    }\r\n    isGlobal && (_names.watchAll = true);\r\n    return formValues;\r\n};\n\nvar isPlainObject = (tempObject) => {\r\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\r\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\r\n};\n\nvar isWeb = typeof window !== 'undefined' &&\r\n    typeof window.HTMLElement !== 'undefined' &&\r\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\r\n    let copy;\r\n    const isArray = Array.isArray(data);\r\n    if (data instanceof Date) {\r\n        copy = new Date(data);\r\n    }\r\n    else if (data instanceof Set) {\r\n        copy = new Set(data);\r\n    }\r\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\r\n        (isArray || isObject(data))) {\r\n        copy = isArray ? [] : {};\r\n        if (!Array.isArray(data) && !isPlainObject(data)) {\r\n            copy = data;\r\n        }\r\n        else {\r\n            for (const key in data) {\r\n                copy[key] = cloneObject(data[key]);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return data;\r\n    }\r\n    return copy;\r\n}\n\n/**\r\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\r\n *\r\n * @remarks\r\n *\r\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\r\n *\r\n * @example\r\n * ```tsx\r\n * const { watch } = useForm();\r\n * const values = useWatch({\r\n *   name: \"fieldName\"\r\n *   control,\r\n * })\r\n * ```\r\n */\r\nfunction useWatch(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    useSubscribe({\r\n        disabled,\r\n        subject: control._subjects.watch,\r\n        next: (formState) => {\r\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\r\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\r\n            }\r\n        },\r\n    });\r\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\r\n    React.useEffect(() => control._removeUnmounted());\r\n    return value;\r\n}\n\n/**\r\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns field properties, field and form state. {@link UseControllerReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function Input(props) {\r\n *   const { field, fieldState, formState } = useController(props);\r\n *   return (\r\n *     <div>\r\n *       <input {...field} placeholder={props.name} />\r\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\r\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *     </div>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useController(props) {\r\n    const methods = useFormContext();\r\n    const { name, control = methods.control, shouldUnregister } = props;\r\n    const isArrayField = isNameInFieldArray(control._names.array, name);\r\n    const value = useWatch({\r\n        control,\r\n        name,\r\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\r\n        exact: true,\r\n    });\r\n    const formState = useFormState({\r\n        control,\r\n        name,\r\n    });\r\n    const _registerProps = React.useRef(control.register(name, {\r\n        ...props.rules,\r\n        value,\r\n    }));\r\n    React.useEffect(() => {\r\n        const updateMounted = (name, value) => {\r\n            const field = get(control._fields, name);\r\n            if (field) {\r\n                field._f.mount = value;\r\n            }\r\n        };\r\n        updateMounted(name, true);\r\n        return () => {\r\n            const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\r\n            (isArrayField\r\n                ? _shouldUnregisterField && !control._stateFlags.action\r\n                : _shouldUnregisterField)\r\n                ? control.unregister(name)\r\n                : updateMounted(name, false);\r\n        };\r\n    }, [name, control, isArrayField, shouldUnregister]);\r\n    return {\r\n        field: {\r\n            name,\r\n            value,\r\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\r\n                target: {\r\n                    value: getEventValue(event),\r\n                    name: name,\r\n                },\r\n                type: EVENTS.CHANGE,\r\n            }), [name]),\r\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\r\n                target: {\r\n                    value: get(control._formValues, name),\r\n                    name: name,\r\n                },\r\n                type: EVENTS.BLUR,\r\n            }), [name, control]),\r\n            ref: (elm) => {\r\n                const field = get(control._fields, name);\r\n                if (field && elm) {\r\n                    field._f.ref = {\r\n                        focus: () => elm.focus(),\r\n                        select: () => elm.select(),\r\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\r\n                        reportValidity: () => elm.reportValidity(),\r\n                    };\r\n                }\r\n            },\r\n        },\r\n        formState,\r\n        fieldState: Object.defineProperties({}, {\r\n            invalid: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.errors, name),\r\n            },\r\n            isDirty: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.dirtyFields, name),\r\n            },\r\n            isTouched: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.touchedFields, name),\r\n            },\r\n            error: {\r\n                enumerable: true,\r\n                get: () => get(formState.errors, name),\r\n            },\r\n        }),\r\n    };\r\n}\n\n/**\r\n * Component based on `useController` hook to work with controlled component.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns provide field handler functions, field and form state.\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { control } = useForm<FormValues>({\r\n *     defaultValues: {\r\n *       test: \"\"\r\n *     }\r\n *   });\r\n *\r\n *   return (\r\n *     <form>\r\n *       <Controller\r\n *         control={control}\r\n *         name=\"test\"\r\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\r\n *           <>\r\n *             <input\r\n *               onChange={onChange} // send value to hook form\r\n *               onBlur={onBlur} // notify when input is touched\r\n *               value={value} // return updated value\r\n *               ref={ref} // set ref for focus management\r\n *             />\r\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\r\n *           </>\r\n *         )}\r\n *       />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nconst Controller = (props) => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? {\r\n        ...errors[name],\r\n        types: {\r\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\r\n            [type]: message || true,\r\n        },\r\n    }\r\n    : {};\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\r\n    for (const key of fieldsNames || Object.keys(fields)) {\r\n        const field = get(fields, key);\r\n        if (field) {\r\n            const { _f, ...currentField } = field;\r\n            if (_f && callback(_f.name)) {\r\n                if (_f.ref.focus) {\r\n                    _f.ref.focus();\r\n                    break;\r\n                }\r\n                else if (_f.refs && _f.refs[0].focus) {\r\n                    _f.refs[0].focus();\r\n                    break;\r\n                }\r\n            }\r\n            else if (isObject(currentField)) {\r\n                focusFieldBy(currentField, callback);\r\n            }\r\n        }\r\n    }\r\n};\n\nvar generateId = () => {\r\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\r\n    ? options.focusName ||\r\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\r\n    : '';\n\nvar getValidationModes = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\r\n    (_names.watchAll ||\r\n        _names.watch.has(name) ||\r\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\r\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar updateFieldArrayRootError = (errors, error, name) => {\r\n    const fieldArrayErrors = compact(get(errors, name));\r\n    set(fieldArrayErrors, 'root', error[name]);\r\n    set(errors, name, fieldArrayErrors);\r\n    return errors;\r\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\r\n    if (!isWeb) {\r\n        return false;\r\n    }\r\n    const owner = value ? value.ownerDocument : 0;\r\n    return (value instanceof\r\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\r\n};\n\nvar isMessage = (value) => isString(value) || React.isValidElement(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.checked && !option.disabled)\r\n                .map((option) => option.value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        return options[0].checked && !options[0].disabled\r\n            ? // @ts-expect-error expected to work in the browser\r\n                options[0].attributes && !isUndefined(options[0].attributes.value)\r\n                    ? isUndefined(options[0].value) || options[0].value === ''\r\n                        ? validResult\r\n                        : { value: options[0].value, isValid: true }\r\n                    : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: null,\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\r\n        ? {\r\n            isValid: true,\r\n            value: option.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) ||\r\n        (Array.isArray(result) && result.every(isMessage)) ||\r\n        (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\r\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\r\n    const inputValue = get(formValues, name);\r\n    if (!mount || disabled) {\r\n        return {};\r\n    }\r\n    const inputRef = refs ? refs[0] : ref;\r\n    const setCustomValidity = (message) => {\r\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\r\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\r\n            inputRef.reportValidity();\r\n        }\r\n    };\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\r\n        isUndefined(ref.value) &&\r\n        isUndefined(inputValue)) ||\r\n        (isHTMLElement(ref) && ref.value === '') ||\r\n        inputValue === '' ||\r\n        (Array.isArray(inputValue) && !inputValue.length);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = {\r\n            type: exceedMax ? maxType : minType,\r\n            message,\r\n            ref,\r\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\r\n        };\r\n    };\r\n    if (isFieldArray\r\n        ? !Array.isArray(inputValue) || !inputValue.length\r\n        : required &&\r\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\r\n                (isBoolean(inputValue) && !inputValue) ||\r\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\r\n                (isRadio && !getRadioValue(refs).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.required,\r\n                message,\r\n                ref: inputRef,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\r\n            const valueNumber = ref.valueAsNumber ||\r\n                (inputValue ? +inputValue : inputValue);\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(inputValue);\r\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\r\n            const isTime = ref.type == 'time';\r\n            const isWeek = ref.type == 'week';\r\n            if (isString(maxOutput.value) && inputValue) {\r\n                exceedMax = isTime\r\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\r\n                    : isWeek\r\n                        ? inputValue > maxOutput.value\r\n                        : valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value) && inputValue) {\r\n                exceedMin = isTime\r\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\r\n                    : isWeek\r\n                        ? inputValue < minOutput.value\r\n                        : valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((maxLength || minLength) &&\r\n        !isEmpty &&\r\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            inputValue.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            inputValue.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty && isString(inputValue)) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.pattern,\r\n                message,\r\n                ref,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        if (isFunction(validate)) {\r\n            const result = await validate(inputValue, formValues);\r\n            const validateError = getValidateError(result, inputRef);\r\n            if (validateError) {\r\n                error[name] = {\r\n                    ...validateError,\r\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    setCustomValidity(validateError.message);\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const key in validate) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\r\n                if (validateError) {\r\n                    validationResult = {\r\n                        ...validateError,\r\n                        ...appendErrorsCurry(key, validateError.message),\r\n                    };\r\n                    setCustomValidity(validateError.message);\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = {\r\n                    ref: inputRef,\r\n                    ...validationResult,\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setCustomValidity(true);\r\n    return error;\r\n};\n\nfunction append(data, value) {\r\n    return [...data, ...convertToArrayPayload(value)];\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...convertToArrayPayload(value),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (!Array.isArray(data)) {\r\n        return [];\r\n    }\r\n    if (isUndefined(data[to])) {\r\n        data[to] = undefined;\r\n    }\r\n    data.splice(to, 0, data.splice(from, 1)[0]);\r\n    return data;\r\n};\n\nfunction prepend(data, value) {\r\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\r\n}\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\r\n};\n\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction isEmptyArray(obj) {\r\n    for (const key in obj) {\r\n        if (!isUndefined(obj[key])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction unset(object, path) {\r\n    const paths = Array.isArray(path)\r\n        ? path\r\n        : isKey(path)\r\n            ? [path]\r\n            : stringToPath(path);\r\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\r\n    const index = paths.length - 1;\r\n    const key = paths[index];\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    if (index !== 0 &&\r\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\r\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\r\n        unset(object, paths.slice(0, -1));\r\n    }\r\n    return object;\r\n}\n\nvar updateAt = (fieldValues, index, value) => {\r\n    fieldValues[index] = value;\r\n    return fieldValues;\r\n};\n\n/**\r\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\r\n *\r\n * @param props - useFieldArray props\r\n *\r\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\r\n *     defaultValues: {\r\n *       test: []\r\n *     }\r\n *   });\r\n *   const { fields, append } = useFieldArray({\r\n *     control,\r\n *     name: \"test\"\r\n *   });\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\r\n *       {fields.map((item, index) => (\r\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\r\n *       ))}\r\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\r\n *         append\r\n *       </button>\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFieldArray(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\r\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\r\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\r\n    const _fieldIds = React.useRef(fields);\r\n    const _name = React.useRef(name);\r\n    const _actioned = React.useRef(false);\r\n    _name.current = name;\r\n    _fieldIds.current = fields;\r\n    control._names.array.add(name);\r\n    props.rules &&\r\n        control.register(name, props.rules);\r\n    useSubscribe({\r\n        next: ({ values, name: fieldArrayName, }) => {\r\n            if (fieldArrayName === _name.current || !fieldArrayName) {\r\n                const fieldValues = get(values, _name.current);\r\n                if (Array.isArray(fieldValues)) {\r\n                    setFields(fieldValues);\r\n                    ids.current = fieldValues.map(generateId);\r\n                }\r\n            }\r\n        },\r\n        subject: control._subjects.array,\r\n    });\r\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\r\n        _actioned.current = true;\r\n        control._updateFieldArray(name, updatedFieldArrayValues);\r\n    }, [control, name]);\r\n    const append$1 = (value, options) => {\r\n        const appendValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\r\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\r\n        ids.current = append(ids.current, appendValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const prepend$1 = (value, options) => {\r\n        const prependValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\r\n        control._names.focus = getFocusFieldName(name, 0, options);\r\n        ids.current = prepend(ids.current, prependValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\r\n        ids.current = removeArrayAt(ids.current, index);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\r\n            argA: index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value, options) => {\r\n        const insertValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\r\n        control._names.focus = getFocusFieldName(name, index, options);\r\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\r\n            argA: index,\r\n            argB: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\r\n        swapArrayAt(ids.current, indexA, indexB);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n        }, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        moveArrayAt(updatedFieldArrayValues, from, to);\r\n        moveArrayAt(ids.current, from, to);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n        }, false);\r\n    };\r\n    const update = (index, value) => {\r\n        const updateValue = cloneObject(value);\r\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\r\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\r\n            argA: index,\r\n            argB: updateValue,\r\n        }, true, false);\r\n    };\r\n    const replace = (value) => {\r\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\r\n        ids.current = updatedFieldArrayValues.map(generateId);\r\n        updateValues([...updatedFieldArrayValues]);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\r\n    };\r\n    React.useEffect(() => {\r\n        control._stateFlags.action = false;\r\n        isWatched(name, control._names) && control._subjects.state.next({});\r\n        if (_actioned.current &&\r\n            (!getValidationModes(control._options.mode).isOnSubmit ||\r\n                control._formState.isSubmitted)) {\r\n            if (control._options.resolver) {\r\n                control._executeSchema([name]).then((result) => {\r\n                    const error = get(result.errors, name);\r\n                    const existingError = get(control._formState.errors, name);\r\n                    if (existingError ? !error && existingError.type : error && error.type) {\r\n                        error\r\n                            ? set(control._formState.errors, name, error)\r\n                            : unset(control._formState.errors, name);\r\n                        control._subjects.state.next({\r\n                            errors: control._formState.errors,\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                const field = get(control._fields, name);\r\n                if (field && field._f) {\r\n                    validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\r\n                        control._subjects.state.next({\r\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\r\n                        }));\r\n                }\r\n            }\r\n        }\r\n        control._subjects.watch.next({\r\n            name,\r\n            values: control._formValues,\r\n        });\r\n        control._names.focus &&\r\n            focusFieldBy(control._fields, (key) => !!key && key.startsWith(control._names.focus || ''));\r\n        control._names.focus = '';\r\n        control._updateValid();\r\n    }, [fields, name, control]);\r\n    React.useEffect(() => {\r\n        !get(control._formValues, name) && control._updateFieldArray(name);\r\n        return () => {\r\n            (control._options.shouldUnregister || shouldUnregister) &&\r\n                control.unregister(name);\r\n        };\r\n    }, [name, control, keyName, shouldUnregister]);\r\n    return {\r\n        swap: React.useCallback(swap, [updateValues, name, control]),\r\n        move: React.useCallback(move, [updateValues, name, control]),\r\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\r\n        append: React.useCallback(append$1, [updateValues, name, control]),\r\n        remove: React.useCallback(remove, [updateValues, name, control]),\r\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\r\n        update: React.useCallback(update, [updateValues, name, control]),\r\n        replace: React.useCallback(replace, [updateValues, name, control]),\r\n        fields: React.useMemo(() => fields.map((field, index) => ({\r\n            ...field,\r\n            [keyName]: ids.current[index] || generateId(),\r\n        })), [fields, keyName]),\r\n    };\r\n}\n\nfunction createSubject() {\r\n    let _observers = [];\r\n    const next = (value) => {\r\n        for (const observer of _observers) {\r\n            observer.next(value);\r\n        }\r\n    };\r\n    const subscribe = (observer) => {\r\n        _observers.push(observer);\r\n        return {\r\n            unsubscribe: () => {\r\n                _observers = _observers.filter((o) => o !== observer);\r\n            },\r\n        };\r\n    };\r\n    const unsubscribe = () => {\r\n        _observers = [];\r\n    };\r\n    return {\r\n        get observers() {\r\n            return _observers;\r\n        },\r\n        next,\r\n        subscribe,\r\n        unsubscribe,\r\n    };\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\r\n    if (isPrimitive(object1) || isPrimitive(object2)) {\r\n        return object1 === object2;\r\n    }\r\n    if (isDateObject(object1) && isDateObject(object2)) {\r\n        return object1.getTime() === object2.getTime();\r\n    }\r\n    const keys1 = Object.keys(object1);\r\n    const keys2 = Object.keys(object2);\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n    for (const key of keys1) {\r\n        const val1 = object1[key];\r\n        if (!keys2.includes(key)) {\r\n            return false;\r\n        }\r\n        if (key !== 'ref') {\r\n            const val2 = object2[key];\r\n            if ((isDateObject(val1) && isDateObject(val2)) ||\r\n                (isObject(val1) && isObject(val2)) ||\r\n                (Array.isArray(val1) && Array.isArray(val2))\r\n                ? !deepEqual(val1, val2)\r\n                : val1 !== val2) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\r\n    for (const key in data) {\r\n        if (isFunction(data[key])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\n\nfunction markFieldsDirty(data, fields = {}) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                fields[key] = Array.isArray(data[key]) ? [] : {};\r\n                markFieldsDirty(data[key], fields[key]);\r\n            }\r\n            else if (!isNullOrUndefined(data[key])) {\r\n                fields[key] = true;\r\n            }\r\n        }\r\n    }\r\n    return fields;\r\n}\r\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                if (isUndefined(formValues) ||\r\n                    isPrimitive(dirtyFieldsFromValues[key])) {\r\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\r\n                        ? markFieldsDirty(data[key], [])\r\n                        : { ...markFieldsDirty(data[key]) };\r\n                }\r\n                else {\r\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\r\n                }\r\n            }\r\n            else {\r\n                deepEqual(data[key], formValues[key])\r\n                    ? delete dirtyFieldsFromValues[key]\r\n                    : (dirtyFieldsFromValues[key] = true);\r\n            }\r\n        }\r\n    }\r\n    return dirtyFieldsFromValues;\r\n}\r\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\r\n    ? value\r\n    : valueAsNumber\r\n        ? value === ''\r\n            ? NaN\r\n            : value\r\n                ? +value\r\n                : value\r\n        : valueAsDate && isString(value)\r\n            ? new Date(value)\r\n            : setValueAs\r\n                ? setValueAs(value)\r\n                : value;\n\nfunction getFieldValue(_f) {\r\n    const ref = _f.ref;\r\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\r\n        return;\r\n    }\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return getRadioValue(_f.refs).value;\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return [...ref.selectedOptions].map(({ value }) => value);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return getCheckboxValue(_f.refs).value;\r\n    }\r\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\r\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\r\n    const fields = {};\r\n    for (const name of fieldsNames) {\r\n        const field = get(_fields, name);\r\n        field && set(fields, name, field._f);\r\n    }\r\n    return {\r\n        criteriaMode,\r\n        names: [...fieldsNames],\r\n        fields,\r\n        shouldUseNativeValidation,\r\n    };\r\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\r\n    ? rule\r\n    : isRegex(rule)\r\n        ? rule.source\r\n        : isObject(rule)\r\n            ? isRegex(rule.value)\r\n                ? rule.value.source\r\n                : rule.value\r\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\r\n    (options.required ||\r\n        options.min ||\r\n        options.max ||\r\n        options.maxLength ||\r\n        options.minLength ||\r\n        options.pattern ||\r\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\r\n    const error = get(errors, name);\r\n    if (error || isKey(name)) {\r\n        return {\r\n            error,\r\n            name,\r\n        };\r\n    }\r\n    const names = name.split('.');\r\n    while (names.length) {\r\n        const fieldName = names.join('.');\r\n        const field = get(_fields, fieldName);\r\n        const foundError = get(errors, fieldName);\r\n        if (field && !Array.isArray(field) && name !== fieldName) {\r\n            return { name };\r\n        }\r\n        if (foundError && foundError.type) {\r\n            return {\r\n                name: fieldName,\r\n                error: foundError,\r\n            };\r\n        }\r\n        names.pop();\r\n    }\r\n    return {\r\n        name,\r\n    };\r\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\r\n    if (mode.isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && mode.isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\r\n    mode: VALIDATION_MODE.onSubmit,\r\n    reValidateMode: VALIDATION_MODE.onChange,\r\n    shouldFocusError: true,\r\n};\r\nfunction createFormControl(props = {}, flushRootRender) {\r\n    let _options = {\r\n        ...defaultOptions,\r\n        ...props,\r\n    };\r\n    const shouldCaptureDirtyFields = props.resetOptions && props.resetOptions.keepDirtyValues;\r\n    let _formState = {\r\n        submitCount: 0,\r\n        isDirty: false,\r\n        isLoading: true,\r\n        isValidating: false,\r\n        isSubmitted: false,\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        touchedFields: {},\r\n        dirtyFields: {},\r\n        errors: {},\r\n    };\r\n    let _fields = {};\r\n    let _defaultValues = isObject(_options.defaultValues)\r\n        ? cloneObject(_options.defaultValues) || {}\r\n        : {};\r\n    let _formValues = _options.shouldUnregister\r\n        ? {}\r\n        : cloneObject(_defaultValues);\r\n    let _stateFlags = {\r\n        action: false,\r\n        mount: false,\r\n        watch: false,\r\n    };\r\n    let _names = {\r\n        mount: new Set(),\r\n        unMount: new Set(),\r\n        array: new Set(),\r\n        watch: new Set(),\r\n    };\r\n    let delayErrorCallback;\r\n    let timer = 0;\r\n    const _proxyFormState = {\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    };\r\n    const _subjects = {\r\n        watch: createSubject(),\r\n        array: createSubject(),\r\n        state: createSubject(),\r\n    };\r\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\r\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\r\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\r\n    const debounce = (callback) => (wait) => {\r\n        clearTimeout(timer);\r\n        timer = window.setTimeout(callback, wait);\r\n    };\r\n    const _updateValid = async (shouldUpdateValid) => {\r\n        if (_proxyFormState.isValid || shouldUpdateValid) {\r\n            const isValid = _options.resolver\r\n                ? isEmptyObject((await _executeSchema()).errors)\r\n                : await executeBuiltInValidation(_fields, true);\r\n            if (isValid !== _formState.isValid) {\r\n                _formState.isValid = isValid;\r\n                _subjects.state.next({\r\n                    isValid,\r\n                });\r\n            }\r\n        }\r\n    };\r\n    const _updateIsValidating = (value) => _proxyFormState.isValidating &&\r\n        _subjects.state.next({\r\n            isValidating: value,\r\n        });\r\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\r\n        if (args && method) {\r\n            _stateFlags.action = true;\r\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\r\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_fields, name, fieldValues);\r\n            }\r\n            if (shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.errors, name))) {\r\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.errors, name, errors);\r\n                unsetEmptyArray(_formState.errors, name);\r\n            }\r\n            if (_proxyFormState.touchedFields &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.touchedFields, name))) {\r\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\r\n            }\r\n            if (_proxyFormState.dirtyFields) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n            }\r\n            _subjects.state.next({\r\n                name,\r\n                isDirty: _getDirty(name, values),\r\n                dirtyFields: _formState.dirtyFields,\r\n                errors: _formState.errors,\r\n                isValid: _formState.isValid,\r\n            });\r\n        }\r\n        else {\r\n            set(_formValues, name, values);\r\n        }\r\n    };\r\n    const updateErrors = (name, error) => {\r\n        set(_formState.errors, name, error);\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\r\n            isUndefined(defaultValue) ||\r\n                (ref && ref.defaultChecked) ||\r\n                shouldSkipSetValueAs\r\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\r\n                : setFieldValue(name, defaultValue);\r\n            _stateFlags.mount && _updateValid();\r\n        }\r\n    };\r\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\r\n        let shouldUpdateField = false;\r\n        let isPreviousDirty = false;\r\n        const output = {\r\n            name,\r\n        };\r\n        if (!isBlurEvent || shouldDirty) {\r\n            if (_proxyFormState.isDirty) {\r\n                isPreviousDirty = _formState.isDirty;\r\n                _formState.isDirty = output.isDirty = _getDirty();\r\n                shouldUpdateField = isPreviousDirty !== output.isDirty;\r\n            }\r\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\r\n            isPreviousDirty = get(_formState.dirtyFields, name);\r\n            isCurrentFieldPristine\r\n                ? unset(_formState.dirtyFields, name)\r\n                : set(_formState.dirtyFields, name, true);\r\n            output.dirtyFields = _formState.dirtyFields;\r\n            shouldUpdateField =\r\n                shouldUpdateField ||\r\n                    (_proxyFormState.dirtyFields &&\r\n                        isPreviousDirty !== !isCurrentFieldPristine);\r\n        }\r\n        if (isBlurEvent) {\r\n            const isPreviousFieldTouched = get(_formState.touchedFields, name);\r\n            if (!isPreviousFieldTouched) {\r\n                set(_formState.touchedFields, name, isBlurEvent);\r\n                output.touchedFields = _formState.touchedFields;\r\n                shouldUpdateField =\r\n                    shouldUpdateField ||\r\n                        (_proxyFormState.touchedFields &&\r\n                            isPreviousFieldTouched !== isBlurEvent);\r\n            }\r\n        }\r\n        shouldUpdateField && shouldRender && _subjects.state.next(output);\r\n        return shouldUpdateField ? output : {};\r\n    };\r\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\r\n        const previousFieldError = get(_formState.errors, name);\r\n        const shouldUpdateValid = _proxyFormState.isValid &&\r\n            isBoolean(isValid) &&\r\n            _formState.isValid !== isValid;\r\n        if (props.delayError && error) {\r\n            delayErrorCallback = debounce(() => updateErrors(name, error));\r\n            delayErrorCallback(props.delayError);\r\n        }\r\n        else {\r\n            clearTimeout(timer);\r\n            delayErrorCallback = null;\r\n            error\r\n                ? set(_formState.errors, name, error)\r\n                : unset(_formState.errors, name);\r\n        }\r\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\r\n            !isEmptyObject(fieldState) ||\r\n            shouldUpdateValid) {\r\n            const updatedFormState = {\r\n                ...fieldState,\r\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\r\n                errors: _formState.errors,\r\n                name,\r\n            };\r\n            _formState = {\r\n                ..._formState,\r\n                ...updatedFormState,\r\n            };\r\n            _subjects.state.next(updatedFormState);\r\n        }\r\n        _updateIsValidating(false);\r\n    };\r\n    const _executeSchema = async (name) => await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\r\n    const executeSchemaAndUpdateState = async (names) => {\r\n        const { errors } = await _executeSchema();\r\n        if (names) {\r\n            for (const name of names) {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(_formState.errors, name, error)\r\n                    : unset(_formState.errors, name);\r\n            }\r\n        }\r\n        else {\r\n            _formState.errors = errors;\r\n        }\r\n        return errors;\r\n    };\r\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\r\n        valid: true,\r\n    }) => {\r\n        for (const name in fields) {\r\n            const field = fields[name];\r\n            if (field) {\r\n                const { _f, ...fieldValue } = field;\r\n                if (_f) {\r\n                    const isFieldArrayRoot = _names.array.has(_f.name);\r\n                    const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation, isFieldArrayRoot);\r\n                    if (fieldError[_f.name]) {\r\n                        context.valid = false;\r\n                        if (shouldOnlyCheckValid) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    !shouldOnlyCheckValid &&\r\n                        (get(fieldError, _f.name)\r\n                            ? isFieldArrayRoot\r\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\r\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\r\n                            : unset(_formState.errors, _f.name));\r\n                }\r\n                fieldValue &&\r\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\r\n            }\r\n        }\r\n        return context.valid;\r\n    };\r\n    const _removeUnmounted = () => {\r\n        for (const name of _names.unMount) {\r\n            const field = get(_fields, name);\r\n            field &&\r\n                (field._f.refs\r\n                    ? field._f.refs.every((ref) => !live(ref))\r\n                    : !live(field._f.ref)) &&\r\n                unregister(name);\r\n        }\r\n        _names.unMount = new Set();\r\n    };\r\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\r\n        !deepEqual(getValues(), _defaultValues));\r\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\r\n        ...(_stateFlags.mount\r\n            ? _formValues\r\n            : isUndefined(defaultValue)\r\n                ? _defaultValues\r\n                : isString(names)\r\n                    ? { [names]: defaultValue }\r\n                    : defaultValue),\r\n    }, isGlobal, defaultValue);\r\n    const _getFieldArray = (name) => compact(get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\r\n    const setFieldValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        let fieldValue = value;\r\n        if (field) {\r\n            const fieldReference = field._f;\r\n            if (fieldReference) {\r\n                !fieldReference.disabled &&\r\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\r\n                fieldValue =\r\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\r\n                        ? ''\r\n                        : value;\r\n                if (isMultipleSelect(fieldReference.ref)) {\r\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\r\n                }\r\n                else if (fieldReference.refs) {\r\n                    if (isCheckBoxInput(fieldReference.ref)) {\r\n                        fieldReference.refs.length > 1\r\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\r\n                                (checkboxRef.checked = Array.isArray(fieldValue)\r\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\r\n                                    : fieldValue === checkboxRef.value))\r\n                            : fieldReference.refs[0] &&\r\n                                (fieldReference.refs[0].checked = !!fieldValue);\r\n                    }\r\n                    else {\r\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\r\n                    }\r\n                }\r\n                else if (isFileInput(fieldReference.ref)) {\r\n                    fieldReference.ref.value = '';\r\n                }\r\n                else {\r\n                    fieldReference.ref.value = fieldValue;\r\n                    if (!fieldReference.ref.type) {\r\n                        _subjects.watch.next({\r\n                            name,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        (options.shouldDirty || options.shouldTouch) &&\r\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\r\n        options.shouldValidate && trigger(name);\r\n    };\r\n    const setValues = (name, value, options) => {\r\n        for (const fieldKey in value) {\r\n            const fieldValue = value[fieldKey];\r\n            const fieldName = `${name}.${fieldKey}`;\r\n            const field = get(_fields, fieldName);\r\n            (_names.array.has(name) ||\r\n                !isPrimitive(fieldValue) ||\r\n                (field && !field._f)) &&\r\n                !isDateObject(fieldValue)\r\n                ? setValues(fieldName, fieldValue, options)\r\n                : setFieldValue(fieldName, fieldValue, options);\r\n        }\r\n    };\r\n    const setValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const isFieldArray = _names.array.has(name);\r\n        const cloneValue = cloneObject(value);\r\n        set(_formValues, name, cloneValue);\r\n        if (isFieldArray) {\r\n            _subjects.array.next({\r\n                name,\r\n                values: _formValues,\r\n            });\r\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\r\n                options.shouldDirty) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n                _subjects.state.next({\r\n                    name,\r\n                    dirtyFields: _formState.dirtyFields,\r\n                    isDirty: _getDirty(name, cloneValue),\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            field && !field._f && !isNullOrUndefined(cloneValue)\r\n                ? setValues(name, cloneValue, options)\r\n                : setFieldValue(name, cloneValue, options);\r\n        }\r\n        isWatched(name, _names) && _subjects.state.next({});\r\n        _subjects.watch.next({\r\n            name,\r\n        });\r\n        !_stateFlags.mount && flushRootRender();\r\n    };\r\n    const onChange = async (event) => {\r\n        const target = event.target;\r\n        let name = target.name;\r\n        const field = get(_fields, name);\r\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\r\n        if (field) {\r\n            let error;\r\n            let isValid;\r\n            const fieldValue = getCurrentFieldValue();\r\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\r\n            const shouldSkipValidation = (!hasValidation(field._f) &&\r\n                !_options.resolver &&\r\n                !get(_formState.errors, name) &&\r\n                !field._f.deps) ||\r\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\r\n            const watched = isWatched(name, _names, isBlurEvent);\r\n            set(_formValues, name, fieldValue);\r\n            if (isBlurEvent) {\r\n                field._f.onBlur && field._f.onBlur(event);\r\n                delayErrorCallback && delayErrorCallback(0);\r\n            }\r\n            else if (field._f.onChange) {\r\n                field._f.onChange(event);\r\n            }\r\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\r\n            const shouldRender = !isEmptyObject(fieldState) || watched;\r\n            !isBlurEvent &&\r\n                _subjects.watch.next({\r\n                    name,\r\n                    type: event.type,\r\n                });\r\n            if (shouldSkipValidation) {\r\n                _proxyFormState.isValid && _updateValid();\r\n                return (shouldRender &&\r\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\r\n            }\r\n            !isBlurEvent && watched && _subjects.state.next({});\r\n            _updateIsValidating(true);\r\n            if (_options.resolver) {\r\n                const { errors } = await _executeSchema([name]);\r\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\r\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\r\n                error = errorLookupResult.error;\r\n                name = errorLookupResult.name;\r\n                isValid = isEmptyObject(errors);\r\n            }\r\n            else {\r\n                error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\r\n                if (error) {\r\n                    isValid = false;\r\n                }\r\n                else if (_proxyFormState.isValid) {\r\n                    isValid = await executeBuiltInValidation(_fields, true);\r\n                }\r\n            }\r\n            field._f.deps &&\r\n                trigger(field._f.deps);\r\n            shouldRenderByError(name, isValid, error, fieldState);\r\n        }\r\n    };\r\n    const trigger = async (name, options = {}) => {\r\n        let isValid;\r\n        let validationResult;\r\n        const fieldNames = convertToArrayPayload(name);\r\n        _updateIsValidating(true);\r\n        if (_options.resolver) {\r\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\r\n            isValid = isEmptyObject(errors);\r\n            validationResult = name\r\n                ? !fieldNames.some((name) => get(errors, name))\r\n                : isValid;\r\n        }\r\n        else if (name) {\r\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\r\n                const field = get(_fields, fieldName);\r\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\r\n            }))).every(Boolean);\r\n            !(!validationResult && !_formState.isValid) && _updateValid();\r\n        }\r\n        else {\r\n            validationResult = isValid = await executeBuiltInValidation(_fields);\r\n        }\r\n        _subjects.state.next({\r\n            ...(!isString(name) ||\r\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\r\n                ? {}\r\n                : { name }),\r\n            ...(_options.resolver || !name ? { isValid } : {}),\r\n            errors: _formState.errors,\r\n            isValidating: false,\r\n        });\r\n        options.shouldFocus &&\r\n            !validationResult &&\r\n            focusFieldBy(_fields, (key) => key && get(_formState.errors, key), name ? fieldNames : _names.mount);\r\n        return validationResult;\r\n    };\r\n    const getValues = (fieldNames) => {\r\n        const values = {\r\n            ..._defaultValues,\r\n            ...(_stateFlags.mount ? _formValues : {}),\r\n        };\r\n        return isUndefined(fieldNames)\r\n            ? values\r\n            : isString(fieldNames)\r\n                ? get(values, fieldNames)\r\n                : fieldNames.map((name) => get(values, name));\r\n    };\r\n    const getFieldState = (name, formState) => ({\r\n        invalid: !!get((formState || _formState).errors, name),\r\n        isDirty: !!get((formState || _formState).dirtyFields, name),\r\n        isTouched: !!get((formState || _formState).touchedFields, name),\r\n        error: get((formState || _formState).errors, name),\r\n    });\r\n    const clearErrors = (name) => {\r\n        name\r\n            ? convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName))\r\n            : (_formState.errors = {});\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const setError = (name, error, options) => {\r\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\r\n        set(_formState.errors, name, {\r\n            ...error,\r\n            ref,\r\n        });\r\n        _subjects.state.next({\r\n            name,\r\n            errors: _formState.errors,\r\n            isValid: false,\r\n        });\r\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\r\n    };\r\n    const watch = (name, defaultValue) => isFunction(name)\r\n        ? _subjects.watch.subscribe({\r\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\r\n        })\r\n        : _getWatch(name, defaultValue, true);\r\n    const unregister = (name, options = {}) => {\r\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\r\n            _names.mount.delete(fieldName);\r\n            _names.array.delete(fieldName);\r\n            if (get(_fields, fieldName)) {\r\n                if (!options.keepValue) {\r\n                    unset(_fields, fieldName);\r\n                    unset(_formValues, fieldName);\r\n                }\r\n                !options.keepError && unset(_formState.errors, fieldName);\r\n                !options.keepDirty && unset(_formState.dirtyFields, fieldName);\r\n                !options.keepTouched && unset(_formState.touchedFields, fieldName);\r\n                !_options.shouldUnregister &&\r\n                    !options.keepDefaultValue &&\r\n                    unset(_defaultValues, fieldName);\r\n            }\r\n        }\r\n        _subjects.watch.next({});\r\n        _subjects.state.next({\r\n            ..._formState,\r\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\r\n        });\r\n        !options.keepIsValid && _updateValid();\r\n    };\r\n    const register = (name, options = {}) => {\r\n        let field = get(_fields, name);\r\n        const disabledIsDefined = isBoolean(options.disabled);\r\n        set(_fields, name, {\r\n            ...(field || {}),\r\n            _f: {\r\n                ...(field && field._f ? field._f : { ref: { name } }),\r\n                name,\r\n                mount: true,\r\n                ...options,\r\n            },\r\n        });\r\n        _names.mount.add(name);\r\n        field\r\n            ? disabledIsDefined &&\r\n                set(_formValues, name, options.disabled\r\n                    ? undefined\r\n                    : get(_formValues, name, getFieldValue(field._f)))\r\n            : updateValidAndValue(name, true, options.value);\r\n        return {\r\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\r\n            ...(_options.shouldUseNativeValidation\r\n                ? {\r\n                    required: !!options.required,\r\n                    min: getRuleValue(options.min),\r\n                    max: getRuleValue(options.max),\r\n                    minLength: getRuleValue(options.minLength),\r\n                    maxLength: getRuleValue(options.maxLength),\r\n                    pattern: getRuleValue(options.pattern),\r\n                }\r\n                : {}),\r\n            name,\r\n            onChange,\r\n            onBlur: onChange,\r\n            ref: (ref) => {\r\n                if (ref) {\r\n                    register(name, options);\r\n                    field = get(_fields, name);\r\n                    const fieldRef = isUndefined(ref.value)\r\n                        ? ref.querySelectorAll\r\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\r\n                            : ref\r\n                        : ref;\r\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\r\n                    const refs = field._f.refs || [];\r\n                    if (radioOrCheckbox\r\n                        ? refs.find((option) => option === fieldRef)\r\n                        : fieldRef === field._f.ref) {\r\n                        return;\r\n                    }\r\n                    set(_fields, name, {\r\n                        _f: {\r\n                            ...field._f,\r\n                            ...(radioOrCheckbox\r\n                                ? {\r\n                                    refs: [\r\n                                        ...refs.filter(live),\r\n                                        fieldRef,\r\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\r\n                                    ],\r\n                                    ref: { type: fieldRef.type, name },\r\n                                }\r\n                                : { ref: fieldRef }),\r\n                        },\r\n                    });\r\n                    updateValidAndValue(name, false, undefined, fieldRef);\r\n                }\r\n                else {\r\n                    field = get(_fields, name, {});\r\n                    if (field._f) {\r\n                        field._f.mount = false;\r\n                    }\r\n                    (_options.shouldUnregister || options.shouldUnregister) &&\r\n                        !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\r\n                        _names.unMount.add(name);\r\n                }\r\n            },\r\n        };\r\n    };\r\n    const _focusError = () => _options.shouldFocusError &&\r\n        focusFieldBy(_fields, (key) => key && get(_formState.errors, key), _names.mount);\r\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault && e.preventDefault();\r\n            e.persist && e.persist();\r\n        }\r\n        let fieldValues = cloneObject(_formValues);\r\n        _subjects.state.next({\r\n            isSubmitting: true,\r\n        });\r\n        if (_options.resolver) {\r\n            const { errors, values } = await _executeSchema();\r\n            _formState.errors = errors;\r\n            fieldValues = values;\r\n        }\r\n        else {\r\n            await executeBuiltInValidation(_fields);\r\n        }\r\n        if (isEmptyObject(_formState.errors)) {\r\n            _subjects.state.next({\r\n                errors: {},\r\n            });\r\n            await onValid(fieldValues, e);\r\n        }\r\n        else {\r\n            if (onInvalid) {\r\n                await onInvalid({ ..._formState.errors }, e);\r\n            }\r\n            _focusError();\r\n        }\r\n        _subjects.state.next({\r\n            isSubmitted: true,\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: isEmptyObject(_formState.errors),\r\n            submitCount: _formState.submitCount + 1,\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const resetField = (name, options = {}) => {\r\n        if (get(_fields, name)) {\r\n            if (isUndefined(options.defaultValue)) {\r\n                setValue(name, get(_defaultValues, name));\r\n            }\r\n            else {\r\n                setValue(name, options.defaultValue);\r\n                set(_defaultValues, name, options.defaultValue);\r\n            }\r\n            if (!options.keepTouched) {\r\n                unset(_formState.touchedFields, name);\r\n            }\r\n            if (!options.keepDirty) {\r\n                unset(_formState.dirtyFields, name);\r\n                _formState.isDirty = options.defaultValue\r\n                    ? _getDirty(name, get(_defaultValues, name))\r\n                    : _getDirty();\r\n            }\r\n            if (!options.keepError) {\r\n                unset(_formState.errors, name);\r\n                _proxyFormState.isValid && _updateValid();\r\n            }\r\n            _subjects.state.next({ ..._formState });\r\n        }\r\n    };\r\n    const _reset = (formValues, keepStateOptions = {}) => {\r\n        const updatedValues = formValues || _defaultValues;\r\n        const cloneUpdatedValues = cloneObject(updatedValues);\r\n        const values = formValues && !isEmptyObject(formValues)\r\n            ? cloneUpdatedValues\r\n            : _defaultValues;\r\n        if (!keepStateOptions.keepDefaultValues) {\r\n            _defaultValues = updatedValues;\r\n        }\r\n        if (!keepStateOptions.keepValues) {\r\n            if (keepStateOptions.keepDirtyValues || shouldCaptureDirtyFields) {\r\n                for (const fieldName of _names.mount) {\r\n                    get(_formState.dirtyFields, fieldName)\r\n                        ? set(values, fieldName, get(_formValues, fieldName))\r\n                        : setValue(fieldName, get(values, fieldName));\r\n                }\r\n            }\r\n            else {\r\n                if (isWeb && isUndefined(formValues)) {\r\n                    for (const name of _names.mount) {\r\n                        const field = get(_fields, name);\r\n                        if (field && field._f) {\r\n                            const fieldReference = Array.isArray(field._f.refs)\r\n                                ? field._f.refs[0]\r\n                                : field._f.ref;\r\n                            if (isHTMLElement(fieldReference)) {\r\n                                const form = fieldReference.closest('form');\r\n                                if (form) {\r\n                                    form.reset();\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                _fields = {};\r\n            }\r\n            _formValues = props.shouldUnregister\r\n                ? keepStateOptions.keepDefaultValues\r\n                    ? cloneObject(_defaultValues)\r\n                    : {}\r\n                : cloneUpdatedValues;\r\n            _subjects.array.next({\r\n                values,\r\n            });\r\n            _subjects.watch.next({\r\n                values,\r\n            });\r\n        }\r\n        _names = {\r\n            mount: new Set(),\r\n            unMount: new Set(),\r\n            array: new Set(),\r\n            watch: new Set(),\r\n            watchAll: false,\r\n            focus: '',\r\n        };\r\n        !_stateFlags.mount && flushRootRender();\r\n        _stateFlags.mount =\r\n            !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\r\n        _stateFlags.watch = !!props.shouldUnregister;\r\n        _subjects.state.next({\r\n            submitCount: keepStateOptions.keepSubmitCount\r\n                ? _formState.submitCount\r\n                : 0,\r\n            isDirty: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.isDirty\r\n                : !!(keepStateOptions.keepDefaultValues &&\r\n                    !deepEqual(formValues, _defaultValues)),\r\n            isSubmitted: keepStateOptions.keepIsSubmitted\r\n                ? _formState.isSubmitted\r\n                : false,\r\n            dirtyFields: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.dirtyFields\r\n                : keepStateOptions.keepDefaultValues && formValues\r\n                    ? getDirtyFields(_defaultValues, formValues)\r\n                    : {},\r\n            touchedFields: keepStateOptions.keepTouched\r\n                ? _formState.touchedFields\r\n                : {},\r\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n    };\r\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\r\n        ? formValues(_formValues)\r\n        : formValues, keepStateOptions);\r\n    const setFocus = (name, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const fieldReference = field && field._f;\r\n        if (fieldReference) {\r\n            const fieldRef = fieldReference.refs\r\n                ? fieldReference.refs[0]\r\n                : fieldReference.ref;\r\n            if (fieldRef.focus) {\r\n                fieldRef.focus();\r\n                options.shouldSelect && fieldRef.select();\r\n            }\r\n        }\r\n    };\r\n    const _updateFormState = (updatedFormState) => {\r\n        _formState = {\r\n            ..._formState,\r\n            ...updatedFormState,\r\n        };\r\n    };\r\n    if (isFunction(_options.defaultValues)) {\r\n        _options.defaultValues().then((values) => {\r\n            reset(values, _options.resetOptions);\r\n            _subjects.state.next({\r\n                isLoading: false,\r\n            });\r\n        });\r\n    }\r\n    return {\r\n        control: {\r\n            register,\r\n            unregister,\r\n            getFieldState,\r\n            _executeSchema,\r\n            _focusError,\r\n            _getWatch,\r\n            _getDirty,\r\n            _updateValid,\r\n            _removeUnmounted,\r\n            _updateFieldArray,\r\n            _getFieldArray,\r\n            _reset,\r\n            _updateFormState,\r\n            _subjects,\r\n            _proxyFormState,\r\n            get _fields() {\r\n                return _fields;\r\n            },\r\n            get _formValues() {\r\n                return _formValues;\r\n            },\r\n            get _stateFlags() {\r\n                return _stateFlags;\r\n            },\r\n            set _stateFlags(value) {\r\n                _stateFlags = value;\r\n            },\r\n            get _defaultValues() {\r\n                return _defaultValues;\r\n            },\r\n            get _names() {\r\n                return _names;\r\n            },\r\n            set _names(value) {\r\n                _names = value;\r\n            },\r\n            get _formState() {\r\n                return _formState;\r\n            },\r\n            set _formState(value) {\r\n                _formState = value;\r\n            },\r\n            get _options() {\r\n                return _options;\r\n            },\r\n            set _options(value) {\r\n                _options = {\r\n                    ..._options,\r\n                    ...value,\r\n                };\r\n            },\r\n        },\r\n        trigger,\r\n        register,\r\n        handleSubmit,\r\n        watch,\r\n        setValue,\r\n        getValues,\r\n        reset,\r\n        resetField,\r\n        clearErrors,\r\n        unregister,\r\n        setError,\r\n        setFocus,\r\n        getFieldState,\r\n    };\r\n}\n\n/**\r\n * Custom hook to manage the entire form.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\r\n *\r\n * @param props - form configuration and validation parameters.\r\n *\r\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   console.log(watch(\"example\"));\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input defaultValue=\"test\" {...register(\"example\")} />\r\n *       <input {...register(\"exampleRequired\", { required: true })} />\r\n *       {errors.exampleRequired && <span>This field is required</span>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useForm(props = {}) {\r\n    const _formControl = React.useRef();\r\n    const [formState, updateFormState] = React.useState({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        isLoading: true,\r\n        isSubmitted: false,\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        submitCount: 0,\r\n        dirtyFields: {},\r\n        touchedFields: {},\r\n        errors: {},\r\n        defaultValues: isFunction(props.defaultValues)\r\n            ? undefined\r\n            : props.defaultValues,\r\n    });\r\n    if (!_formControl.current) {\r\n        _formControl.current = {\r\n            ...createFormControl(props, () => updateFormState((formState) => ({ ...formState }))),\r\n            formState,\r\n        };\r\n    }\r\n    const control = _formControl.current.control;\r\n    control._options = props;\r\n    useSubscribe({\r\n        subject: control._subjects.state,\r\n        next: (value) => {\r\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\r\n                updateFormState({ ...control._formState });\r\n            }\r\n        },\r\n    });\r\n    React.useEffect(() => {\r\n        if (!control._stateFlags.mount) {\r\n            control._updateValid();\r\n            control._stateFlags.mount = true;\r\n        }\r\n        if (control._stateFlags.watch) {\r\n            control._stateFlags.watch = false;\r\n            control._subjects.state.next({});\r\n        }\r\n        control._removeUnmounted();\r\n    });\r\n    React.useEffect(() => {\r\n        if (props.values && !deepEqual(props.values, control._defaultValues)) {\r\n            control._reset(props.values, control._options.resetOptions);\r\n        }\r\n    }, [props.values, control]);\r\n    React.useEffect(() => {\r\n        formState.submitCount && control._focusError();\r\n    }, [control, formState.submitCount]);\r\n    _formControl.current.formState = getProxyFormState(formState, control);\r\n    return _formControl.current;\r\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","import { useForm, FormProvider, useFormContext, Controller } from 'react-hook-form';\nexport { useFormContext } from 'react-hook-form';\nimport { createContext, useState, useMemo, useCallback, Children, isValidElement, cloneElement, useContext } from 'react';\nimport { jsx, Fragment } from 'react/jsx-runtime';\n\nfunction M({components:t,render:o,fields:i,id:n,...a}){let{control:f}=useFormContext(),s=i?.find(e=>e.id===n),d=useCallback(e=>{if(s){let m=s?.type;if(o)return o(e);if(t?.[m])return t[m]?.(e);if(t?.default)return t.default?.(e)}return null},[o,t,s]);return s?jsx(Controller,{control:f,render:e=>d?.({...e,field:{...s,...e.field,id:n,onChange:m=>{e.field.onChange(m),a.onChange?.(m);}}})??jsx(Fragment,{}),name:n}):null}var c=M;var P=createContext({components:{}});function S({components:t,children:o}){return jsx(P.Provider,{value:{components:t??{}},children:o})}var x=()=>useContext(P)??{},R=S;function B(t){let{fields:o,getFieldDefaultValue:i,...n}=t||{},[a,f]=useState(o??void 0),s=useMemo(()=>o?.reduce((m,u)=>(m[u.id]=i?i(u):u.value,m),{}),[o,i]),d=n?.defaultValues||s,e=useForm({...n,defaultValues:d});return o&&JSON.stringify(a)!==JSON.stringify(o)&&(e.reset?.(d),f(o)),{methods:e,formProps:{methods:e,fields:o}}}var p=B;function A({id:t,onSubmit:o,className:i,style:n,methods:{handleSubmit:a},onChange:f,fields:s,children:d,...e}){let m=x(),u=useMemo(()=>({...m.components,...e.components}),[m.components,e.components]),r=useCallback(V=>Children.map(V,F=>{if(isValidElement(F)){let l=F;if(l?.type===c)return cloneElement(l,{components:u,fields:s,onChange:f});if(l.props?.children)return cloneElement(l,{...l.props,children:r(l.props.children)})}return F}),[s,u,f]);return jsx(\"form\",{id:t,onSubmit:o?a(o):void 0,className:i,style:n,children:r(d)})}function y({getFieldDefaultValue:t,...o}){let{methods:i}=p(o?.fields?{fields:o.fields,getFieldDefaultValue:t}:void 0),n=useMemo(()=>o.methods??i,[o.methods,i]);return jsx(FormProvider,{...n,children:jsx(A,{...o,methods:n})})}y.Field=c;var k=y;var K=(r=>(r.Bool=\"boolean\",r.Date=\"date\",r.Datetime=\"datetime\",r.List=\"list\",r.Dict=\"dict\",r.link=\"link\",r.Float=\"float\",r.Integer=\"integer\",r.String=\"string\",r.Time=\"time\",r.Default=\"default\",r))(K||{});\n\nexport { K as FieldType, k as Form, R as FormConfigProvider, p as useForm };\n","const fields = [\n  {\n    default: null,\n    helper_text: null,\n    id: \"name\",\n    label: \"Name\",\n    max_length: null,\n    min_length: null,\n    multiple: false,\n    required: false,\n    type: \"string\",\n    values: null,\n  },\n  {\n    default: null,\n    helper_text: null,\n    id: \"surname\",\n    label: \"Surname\",\n    max_length: null,\n    min_length: null,\n    multiple: false,\n    required: false,\n    type: \"string\",\n    values: null,\n  },\n  {\n    default: null,\n    helper_text: null,\n    id: \"email\",\n    label: \"Email\",\n    max_length: null,\n    min_length: null,\n    multiple: false,\n    required: false,\n    type: \"string\",\n    values: null,\n  },\n  {\n    default: null,\n    helper_text: null,\n    id: \"active\",\n    label: \"Active\",\n    max_length: null,\n    min_length: null,\n    multiple: false,\n    required: false,\n    type: \"boolean\",\n    values: null,\n  },\n];\n\nconst fieldsWithValues = [\n  {\n    default: null,\n    helper_text: null,\n    id: \"name\",\n    label: \"Name\",\n    value: \"John\",\n    max_length: null,\n    min_length: null,\n    multiple: false,\n    required: false,\n    type: \"string\",\n    values: null,\n  },\n  {\n    default: null,\n    helper_text: null,\n    id: \"surname\",\n    label: \"Surname\",\n    value: \"Doe\",\n    max_length: null,\n    min_length: null,\n    multiple: false,\n    required: false,\n    type: \"string\",\n    values: null,\n  },\n  {\n    default: null,\n    helper_text: null,\n    id: \"email\",\n    label: \"Email\",\n    value: \"john@doe.com\",\n    max_length: null,\n    min_length: null,\n    multiple: false,\n    required: false,\n    type: \"string\",\n    values: null,\n  },\n  {\n    default: null,\n    helper_text: null,\n    id: \"active\",\n    label: \"Active\",\n    max_length: null,\n    min_length: null,\n    multiple: false,\n    required: false,\n    type: \"boolean\",\n    values: null,\n  },\n];\n\nexport { fields, fieldsWithValues };\n"],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","isCheckBoxInput","element","isDateObject","value","isNullOrUndefined","isObjectType","isObject","getEventValue","event","getNodeParentName","name","isNameInFieldArray","names","compact","isUndefined","val","get","obj","path","defaultValue","result","key","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","HookFormContext","React","useFormContext","FormProvider","props","children","data","getProxyFormState","formState","control","localProxyFormState","isRoot","_key","isEmptyObject","shouldRenderFormState","formStateData","_proxyFormState","updateFormState","convertToArrayPayload","shouldSubscribeByName","signalName","exact","currentName","useSubscribe","_props","subscription","useFormState","methods","disabled","_mounted","_localProxyFormState","_name","isDirty","isString","generateWatchOutput","_names","formValues","isGlobal","fieldName","isPlainObject","tempObject","prototypeCopy","isWeb","cloneObject","copy","isArray","useWatch","updateValue","useController","shouldUnregister","isArrayField","_registerProps","updateMounted","field","_shouldUnregisterField","elm","message","Controller","appendErrors","validateAllFieldCriteria","errors","type","isKey","stringToPath","input","set","object","index","tempPath","length","lastIndex","newValue","objValue","focusFieldBy","fields","callback","fieldsNames","_f","currentField","getValidationModes","mode","isWatched","isBlurEvent","watchName","updateFieldArrayRootError","error","fieldArrayErrors","isBoolean","isFileInput","isFunction","isHTMLElement","owner","isMessage","isRadioInput","isRegex","defaultResult","validResult","getCheckboxValue","options","values","option","defaultReturn","getRadioValue","previous","getValidateError","ref","getValueAndMessage","validationData","validateField","shouldUseNativeValidation","isFieldArray","refs","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputValue","inputRef","setCustomValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","valueDate","convertTimeToDate","time","isTime","isWeek","maxLengthOutput","minLengthOutput","patternValue","validateError","validationResult","baseGet","updatePath","isEmptyArray","unset","paths","childObject","createSubject","_observers","observer","o","isPrimitive","deepEqual","object1","object2","keys1","keys2","val1","val2","isMultipleSelect","live","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultValues","getFieldValueAs","valueAsDate","setValueAs","getFieldValue","getResolverOptions","_fields","criteriaMode","getRuleValue","rule","hasValidation","schemaErrorLookup","foundError","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","createFormControl","flushRootRender","_options","shouldCaptureDirtyFields","_formState","_defaultValues","_formValues","_stateFlags","delayErrorCallback","timer","_subjects","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","_updateValid","shouldUpdateValid","isValid","_executeSchema","executeBuiltInValidation","_updateIsValidating","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","touchedFields","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","updatedFormState","executeSchemaAndUpdateState","shouldOnlyCheckValid","context","isFieldArrayRoot","fieldError","_removeUnmounted","unregister","getValues","_getWatch","_getFieldArray","fieldReference","optionRef","checkboxRef","radioRef","trigger","setValues","fieldKey","setValue","cloneValue","onChange","target","getCurrentFieldValue","shouldSkipValidation","watched","previousErrorLookupResult","errorLookupResult","fieldNames","getFieldState","clearErrors","inputName","setError","watch","payload","register","disabledIsDefined","fieldRef","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","resetField","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","form","reset","setFocus","_updateFormState","useForm","_formControl","M","t","i","s","useCallback","_a","_b","jsx","Fragment","P","createContext","S","x","useContext","R","B","useState","useMemo","u","A","r","V","Children","F","isValidElement","cloneElement","y","K","fieldsWithValues"],"mappings":"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","x_google_ignoreList":[0,1,2]}